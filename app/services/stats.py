import pandas as pd
from statistics import mean, stdev
from scipy.stats import skew, norm
import numpy as np
import scipy.stats as stats
from typing import List, Dict
from datetime import datetime, timedelta, timezone, date

def calcular_estatisticas(dados: List[dict]) -> dict:
    df = pd.DataFrame(dados)
    df["frequenciaMedia"] = pd.to_numeric(df["frequenciaMedia"], errors="coerce")
    valores = df["frequenciaMedia"].dropna()
    valores = valores[(valores >= 30) & (valores <= 200)]
    print(f"Total bruto: {len(df)} | Ap√≥s filtro de faixa: {len(valores)}")

    media = valores.mean()
    desvio = valores.std()

    if desvio > 0:
        limite_inferior = media - 3 * desvio
        limite_superior = media + 3 * desvio
        valores = valores[(valores >= limite_inferior) & (valores <= limite_superior)]

    if valores.empty:
        return {
            "media": None,
            "mediana": None,
            "moda": None,
            "desvio_padrao": None,
            "assimetria": None
        }

    return {
        "media": float(valores.mean()),
        "mediana": float(valores.median()),
        "moda": float(valores.mode().iloc[0]) if not valores.mode().empty else None,
        "desvio_padrao": float(valores.std()),
        "assimetria": float(skew(valores, bias=False))
        
    }

def media_por_intervalo(dados: List[dict], inicio: date, fim: date) -> Dict:
    if not dados:
        return {"media": None, "mensagem": "Nenhum dado dispon√≠vel."}

    df = pd.DataFrame(dados)

    if 'data' not in df.columns or 'frequenciaMedia' not in df.columns:
        return {"media": None, "mensagem": "Colunas esperadas n√£o encontradas."}

    df['data'] = pd.to_datetime(df['data'], errors='coerce').dt.date
    df['frequenciaMedia'] = pd.to_numeric(df['frequenciaMedia'], errors='coerce')

    df = df.dropna(subset=['data', 'frequenciaMedia'])

    df_filtrado = df[(df['data'] >= inicio) & (df['data'] <= fim)]

    if df_filtrado.empty:
        return {"media": None, "mensagem": "Nenhum dado encontrado para o intervalo fornecido."}

    media = df_filtrado['frequenciaMedia'].mean().round(2)
    return {"media": media}


def calcular_probabilidade(valor: int, dados: list):
    # Filtra apenas valores v√°lidos
    valores_validos = [v for v in dados if isinstance(v, (int, float)) and 30 <= v <= 200]

    if not valores_validos:
        return {
            "erro": "N√£o h√° dados suficientes dentro da faixa fisiol√≥gica (30 a 200 BPM) para an√°lise."
        }

    media = np.mean(valores_validos)
    desvio = np.std(valores_validos)

    # Se valor for muito fora do plaus√≠vel
    if valor < 30 or valor > 250:
        return {
            "valor_informado": valor,
            "media_registrada": round(media, 2),
            "desvio_padrao": round(desvio, 2),
            "titulo": "Valor inv√°lido ‚ùå",
            "avaliacao": "O valor informado est√° fora da faixa fisiol√≥gica plaus√≠vel para c√£es e gatos (30 a 200 BPM)."
        }

    # Probabilidade acumulada (valor ‚â§ x)
    prob = norm.cdf(valor, loc=media, scale=desvio) * 100

    # Classifica√ß√£o por z-score
    z = abs((valor - media) / desvio)
    if z < 1:
        classificacao = "Normal"
        interpretacao = "Com base nos dados dos √∫ltimos 5 dias, este valor est√° dentro da faixa considerada normal."
        titulo = "Tudo certo! ‚úÖ"
    elif z < 2:
        classificacao = "Levemente fora do normal"
        interpretacao = "Com base nos dados dos √∫ltimos 5 dias, o valor est√° um pouco fora da m√©dia, mas pode ser aceit√°vel em certas condi√ß√µes."
        titulo = "Aten√ß√£o ‚ö†Ô∏è"
    elif z < 3:
        classificacao = "Fora do padr√£o"
        interpretacao = "Com base nos dados dos √∫ltimos 5 dias, o batimento est√° significativamente diferente da m√©dia."
        titulo = "Aviso! ‚ùó"
    else:
        classificacao = "Muito fora do padr√£o"
        interpretacao = "Com base nos dados dos √∫ltimos 5 dias, o valor √© extremamente diferente dos batimentos normais. Pode indicar erro ou situa√ß√£o cr√≠tica."
        titulo = "Alerta! üö®"

    return {
        "valor_informado": valor,
        "media_registrada": round(media, 2),
        "desvio_padrao": round(desvio, 2),
        "probabilidade_percentual": round(prob, 2),
        "interpretacao": interpretacao,
        "classificacao": classificacao,
        "titulo": titulo,
        "avaliacao": interpretacao  # pode personalizar mais se quiser
    }


def media_ultimos_5_dias_validos(dados: List[dict]) -> dict:
    df = pd.DataFrame(dados)

    if 'data' not in df.columns or 'frequenciaMedia' not in df.columns:
        print("Colunas esperadas n√£o encontradas. Colunas dispon√≠veis:", df.columns.tolist())
        return {}

    df['data'] = pd.to_datetime(df['data'], errors='coerce').dt.date
    df['frequenciaMedia'] = pd.to_numeric(df['frequenciaMedia'], errors='coerce')

    df = df.dropna(subset=['data', 'frequenciaMedia'])

    medias_por_dia = df.groupby('data')['frequenciaMedia'].mean().round(2)

    ultimos_5_dias = medias_por_dia.sort_index(ascending=False).head(5)

    return ultimos_5_dias.sort_index().to_dict()

def media_ultimas_5_horas_registradas(dados: List[dict]) -> dict:
    df = pd.DataFrame(dados)
    if df.empty:
        return {"media": None, "media_por_hora": {}, "mensagem": "Nenhum dado dispon√≠vel."}

    # Convers√£o e limpeza
    df["data"] = pd.to_datetime(df["data"], errors="coerce")
    df = df.dropna(subset=["data", "frequenciaMedia"])
    df["frequenciaMedia"] = pd.to_numeric(df["frequenciaMedia"], errors="coerce")
    df = df.dropna(subset=["frequenciaMedia"])

    # Ordenar por data decrescente
    df = df.sort_values(by="data", ascending=False)

    # Arredondar para hora cheia com 'h'
    df["hora"] = df["data"].dt.floor("h")

    # Selecionar as √∫ltimas 5 horas √∫nicas
    ultimas_5_horas = df["hora"].drop_duplicates().head(5)

    # Filtrar os dados dessas horas
    df_filtrado = df[df["hora"].isin(ultimas_5_horas)]

    if df_filtrado.empty:
        return {"media": None, "media_por_hora": {}, "mensagem": "Nenhum dado nas √∫ltimas 5 horas registradas."}

    # Calcular m√©dia por hora
    medias_por_hora = df_filtrado.groupby("hora")["frequenciaMedia"].mean().sort_index()
    medias_formatadas = {str(hora): round(media, 2) for hora, media in medias_por_hora.items()}

    # Corrigindo a m√©dia geral (m√©dia das m√©dias por hora)
    media_geral = round(medias_por_hora.mean(), 2)

    return {
        "media": media_geral,
        "media_por_hora": medias_formatadas
    }
